variables:
  GITLAB_REPO: git@g.a-bug.org:maix_sw/k230_sdk_release.git
  GITHUB_REPO: git@github.com:kendryte/k230_sdk.git
  GITEE_REPO: git@gitee.com:kendryte/k230_sdk.git
  CONF: k230_evb_defconfig

default:
  image: ai.b-bug.org:5000/k230_sdk:latest
  interruptible: true

# MR merged
merge_sync:
  rules:
   - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"
  extends:
    - .setup_env
    - .sync_github_gitee

# tag push
tag_sync:
  rules:
   - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_TAG =~ /^v\d+\.\d+.*$/
  extends:
    - .setup_env
    - .sync_github_gitee

# auto sync
schedule_sync:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
  extends:
    - .setup_env
    - .sync_github_gitee

# manual sync
manual_sync:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
  extends:
    - .setup_env
    - .sync_github_gitee

# new MR open
build-image:
  variables:
    DST_BASE: /data1/k230/gitlab-ci/images/${CI_PROJECT_NAME}
    SRC_DIR: ./output/${CONF}/images
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"
  stage: build
  tags:
    - k230_sdk
  timeout: 30m
  extends:
    - .setup_env
  script:
    - !reference [.common, build_image]
    - !reference [.common, save_image]
  artifacts:
    reports:
      dotenv: build.env

.setup_env:
  before_script:
    - echo '----------Build ENV Prepare----------'
    - echo 'Add SSH KEY for Multiple repo'
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | ssh-add - > ~/.ssh/id_ed25519 || exit 1
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n    StrictHostKeyChecking no\n" > ~/.ssh/config'
    - echo $SHELL
    - echo "increate ssh timeout for github"
    - echo "    ServerAliveInterval 30" >> ~/.ssh/config
    - echo "    ServerAliveCountMax 60" >> ~/.ssh/config
    - echo "    TCPKeepAlive yes" >> ~/.ssh/config
    - cat ~/.ssh/config
    - whoami
    - uptime
    - pwd
    - uname -a
    - cat /etc/issue
    - echo $CI_PROJECT_DIR
    - echo $CI_PROJECT_NAME
    - echo '----------set git config ----------'
    - echo "${GITLAB_USER_EMAIL}"
    - echo "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global --add safe.directory $CI_PROJECT_DIR

.sync_github_gitee:
  timeout: 90m
  image: ai.b-bug.org:5000/k230_sdk:latest
  tags:
    - k230_sdk
  script:
    - cd $CI_PROJECT_DIR
    - ls -alht
    - rm -rf ./k230_sdk/
    - git clone ${GITLAB_REPO} k230_sdk || exit 1
    - cd k230_sdk || exit 1
    - pwd
    - git checkout main
    - git branch -a
    - git status
    - echo '---pull latest main branch---'
    - git pull origin main
    - echo '---fetch all tags---'
    - git fetch --tags
    - git remote add github ${GITHUB_REPO}
    - git remote add gitee ${GITEE_REPO}
    - git remote -v
    - git branch -a
    - git status
    - echo "---push to gitee---"
    - git push --atomic --tags -u -f gitee main || git push --atomic --tags -u -f gitee main
    - echo "---push to github---"
    - git push --atomic --tags -u -f github main || git push --atomic --tags -u -f github main || git push --atomic --tags -u -f github main

.generate_version: &generate_version
  - echo "----------get version from file----------"
  - pwd
  - cat ./board/common/post_copy_rootfs/etc/version/release_version || exit 1
  - ver=$(cat ./board/common/post_copy_rootfs//etc/version/release_version | grep ".*-gitlab-runner") || exit 1
  - echo ${ver}
  - echo "----------save version file to output----------"
  - cp ./board/common/post_copy_rootfs/etc/version/release_version ${SRC_DIR}/version || exit 1
  - ls -alht ${SRC_DIR}/version || exit 1
  - cat ${SRC_DIR}/version || exit 1

.update_build_cfg: &update_build_cfg
  - echo "------temp disable quick boot for CI image------"
  - cat configs/${CONF}  | sed -E 's/CONFIG_QUICK_BOOT=y/# CONFIG_QUICK_BOOT is not set/g' > configs/temp_config
  - cat configs/temp_config | grep "QUICK_BOOT"
  - cp -rf configs/temp_config configs/${CONF}
  - echo "build config"
  - cat configs/${CONF} | grep "QUICK_BOOT"
  - echo "------temp enable RT-Smart utest for CI image------"
  - rtconfig_file="src/big/rt-smart/kernel/bsp/maix3/rtconfig.h"
  - echo "#define RT_USING_UTEST" >> ${rtconfig_file}
  - echo "#define UTEST_THR_STACK_SIZE 16384" >> ${rtconfig_file}
  - echo "#define UTEST_THR_PRIORITY 20" >> ${rtconfig_file}
  - cat ${rtconfig_file} | grep "UTEST"
  - echo "------check current job for security img build option------"
  - >
    if [[ $CI_PIPELINE_SOURCE == "merge_request_event" ]];
    then
      echo "current job is Merge Request, SKIP build security img to save build time";
      echo "build config";
      cat configs/${CONF} | grep "SECURITY_IMG";
    else
      echo "current job is NOT Merge Request, add security img build option";
      cat configs/${CONF} | sed -E 's/# CONFIG_GEN_SECURITY_IMG is not set/CONFIG_GEN_SECURITY_IMG=y/g' > configs/temp_config2;
      echo "temp config";
      cat configs/temp_config2 | grep "SECURITY_IMG";
      cp -rf configs/temp_config2 configs/${CONF};
      echo "build config";
      cat configs/${CONF} | grep "SECURITY_IMG";
    fi
  - echo "update config done"

.update_version: &update_version
  - echo "---curren version ${ver}"
  - >
    if [[ $CI_COMMIT_TAG =~ ^v[0-9]+\.[0-9]+.*$ ]];
    then
      echo "release tag exist, will replace version dir with tag";
      ver=$CI_COMMIT_TAG;
      echo "tag is ${ver}";
    else
      echo "tag is null, skip ver overwrite";
      echo "ver is ${ver}";
    fi
  - echo "---update version ${ver}"

.build_job: &build_job
  - pwd
  - echo "----------skip toolchain download in local docker----------"
  - mkdir toolchain && touch toolchain/.toolchain_ready
  - ls toolchain/.toolchain_ready || exit 1
  - echo "----------download build source code----------"
  - source tools/get_download_url.sh
  - time make prepare_sourcecode || exit 1
  - *update_build_cfg
  - time make || exit 1
  - echo "----------show sdk image build output----------"
  - pwd
  - du -h -d 2 output/${CONF}/ || exit 1
  - ls -alht output/${CONF}/images || exit 1
  - echo "----------remove img----------"
  - rm -rf output/${CONF}/images/sysimage-sdcard.img
  - rm -rf output/${CONF}/images/sysimage-spinand32m.img
  - rm -rf output/${CONF}/images/sysimage-spinor32m.img
  - echo "----------zip big-core/little-core ----------"
  - cd output/${CONF}/images/ && pwd
  - tar -zcf big-core.tgz ./big-core/
  - tar -zcf little-core.tgz ./little-core/
  - rm -rf ./big-core/
  - rm -rf ./little-core/
  - cd ../../../ && pwd
  - echo "----------build sdk image done----------"

.common:
  build_image:
    - cd $CI_PROJECT_DIR
    - echo "----------build image----------"
    - *build_job
    - echo "----------set test-image flag----------"
    - echo "SKIP=False" > build.env
  save_image:
    - pwd
    - echo "----------save image----------"
    - echo ${DST_BASE}
    - echo "set DST_DIR with different type based on docs/images/src"
    - DST_DIR="${DST_BASE}/images"
    - echo ${DST_DIR}
    - echo "---create repo dir---"
    - sudo mkdir -p ${DST_DIR}
    - *generate_version
    - echo "----------Save build to external path----------"
    - *update_version
    - SUB_DIR="${ver}/${CONF}";
    - echo "---create current image version dir---"
    - sudo mkdir -p ${DST_DIR}/${SUB_DIR}/ || exit 1
    - echo "---remove image file---"
    - rm -rf ${SRC_DIR}/images/
    - echo "---save sdk build output---"
    - sudo cp -rf --sparse=always ${SRC_DIR}/ ${DST_DIR}/${SUB_DIR}/
    - echo "${DST_DIR}/${SUB_DIR}/"
    - ls "${DST_DIR}/${SUB_DIR}/"
    - echo "add latest link for current build"
    - test -h ${DST_DIR}/latest && sudo rm ${DST_DIR}/latest
    - sudo ln -s ${DST_DIR}/${ver} ${DST_DIR}/latest || exit 1
    - ls ${DST_DIR}/latest
    - echo "----------output URL----------"
    - echo "${DST_DIR}/${SUB_DIR}/" | sed "s/\/data1/https:\/\/ai\.b-bug\.org/g"
    - echo "----------save image done----------"
